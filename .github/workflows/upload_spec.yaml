name: Upload API Spec to Konnect / Dev Portal

on:
# If you want to upload spec before testing or deploying it,
# uncomment the followings.
#
  #push:
  #  paths:
  #    - docs/openapi/api-spec.yaml
  workflow_run:
    # Run after deploy_oas.yaml
    workflows: ["Convert OpenAPI Spec to Kong and Deploy"] 
    types:
      - completed 

env:
  REGIONAL_EP: "https://${{ vars.KONNECT_REGION }}.api.konghq.com/v3"
  AUTH_HEADER: "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}"
  PRODUCT_NAME: "${{ vars.PRODUCT_NAME }}"

jobs:
  upload-spec:
    if: ${{ github.event.workflow_run.conclusion == 'success' }} 
    runs-on: ubuntu-latest
    container:
      image: ubuntu
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install command
        run: |
          apt-get update -y
          apt-get install -y curl jq
          curl -sL https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -o /usr/local/bin/yq
          chmod +x /usr/local/bin/yq
      - name: Upload api-spec.yaml
        shell: bash
        run: |
          file="docs/openapi/api-spec.yaml"
          msg="Document '$file' has been successfully uploaded."
          return_code=0
          set -x
          echo "Detected changes in $file"

          # Get Product ID from PRODUCT_NAME.
          PRODUCT_ID=$(curl -X GET -s \
                         ${REGIONAL_EP}/apis \
                         -H "${AUTH_HEADER}" \
                       | jq -r '.data[] | select(.name == "'"$PRODUCT_NAME"'") | .id' || true)

          if [ "$(echo $PRODUCT_ID | wc -w)" -ne 1 ]; then
              echo "[Error] Failed to obtain PRODUCT_ID or obtained multiple PRODUCT_NAME: $PRODUCT_NAME, PRODUCT_IDs: $PRODUCT_ID"
              exit 1
          fi

          filename=$(basename "$file")

          SPEC_ID=$(curl -s -X GET \
              ${REGIONAL_EP}/apis/${PRODUCT_ID}/versions \
              -H "${AUTH_HEADER}" \
              | jq -r '.data[].id' || true)

          # Create payload
          SPEC_VERSION=$(yq '.info.version' $file)
          jq -n \
            --arg version "$SPEC_VERSION" \
            --arg content "$(yq -o=json '.' $file | jq -c .)" \
            '{version: $version, spec: {content: $content}}' > payload.json

          if [ -z "$SPEC_ID" ]; then
            # If no specification exists, create a new one
            action=create
            UPLOAD_ENDPOINT=${REGIONAL_EP}/apis/${PRODUCT_ID}/versions
            METHOD=POST
          else
            # If the specification exists, update it
            action=update
            UPLOAD_ENDPOINT=${REGIONAL_EP}/apis/${PRODUCT_ID}/versions/$SPEC_ID
            METHOD=PATCH
          fi

          curl_response=$(curl -w "\n%{http_code}" -X $METHOD \
            ${UPLOAD_ENDPOINT} \
            -H "${AUTH_HEADER}" \
            -H "Content-Type: application/json" \
            --data-binary @payload.json)     
      
          http_code=$(echo "$curl_response" | tail -n 1)
          # Check if the curl command succeeded
          if [[ "$http_code" -lt 200 || "$http_code" -ge 300 ]]; then
              msg="Failed to $action specification. (err: $curl_response)"
              return_code=1
          fi
          echo ""
          echo "---"
          echo "Status Code: $http_code"
          echo $msg
          echo "---"
          exit $return_code

