# ワークフローの名前: Kong Gateway イメージのセキュリティスキャン
name: Scan Kong Gateway Image

# このワークフローが実行されるタイミングを定義
on:
  # 別のワークフロー(Push Kong Gateway Image to GHCR)が完了した後に実行
  workflow_run:
    workflows: ["Push Kong Gateway Image to GHCR"]
    types:
      - completed
  # GitHub上の「Actions」タブから手動で実行可能
  workflow_dispatch:  # 手動トリガーも可能

# 環境変数の設定
env:
  REGISTRY: ghcr.io  # GitHubのコンテナレジストリのURL
  IMAGE_NAME: ${{ github.repository }}/kong-gateway  # スキャン対象のイメージ名

# ジョブの定義
jobs:
  # イメージスキャンジョブ
  scan-image:
    # Ubuntuの最新バージョン上で実行
    runs-on: ubuntu-latest
    # 前のワークフロー（イメージ構築）が成功した場合のみ実行
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    # 必要な権限の設定
    permissions:
      contents: read       # リポジトリのコンテンツを読み取る権限
      packages: read       # GitHubパッケージ（コンテナイメージ）を読み取る権限
      security-events: write  # セキュリティスキャン結果をGitHubセキュリティタブに書き込む権限

    # 実行する一連のステップ
    steps:
      # ステップ1: リポジトリのコードをチェックアウト（Dockerfileなどを利用するため）
      - name: Checkout repository
        uses: actions/checkout@v4

      # ステップ2: GitHub Container Registryにログイン
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}  # レジストリのURL（ghcr.io）
          username: ${{ github.actor }}  # 現在のユーザー名（ワークフローを実行したユーザー）
          password: ${{ secrets.GITHUB_TOKEN }}  # GitHubが自動的に提供する認証トークン
      
      # ステップ3: スキャン対象のKong Gatewayイメージをプル
      - name: Pull latest image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      # ステップ4: Trivyを使用した脆弱性スキャン
      # Trivyは、オープンソースの軽量コンテナスキャナー
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest'  # スキャン対象のイメージ
          format: 'sarif'  # GitHub Security Dashboardで表示するためのフォーマット
          output: 'trivy-results.sarif'  # 結果の出力先ファイル
          severity: 'CRITICAL,HIGH'  # 重要度が「重大」と「高」の脆弱性のみをスキャン

      # ステップ5: Trivyのスキャン結果をGitHub Security Insightsにアップロード
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'  # Trivyの結果ファイル

      # ステップ6: Snykを使用した追加の脆弱性スキャン
      # Snykは、より詳細な脆弱性分析と継続的なモニタリング機能を提供
      - name: Scan with Snyk
        uses: snyk/actions/docker@master
        env:
          # Snykの認証トークン（GitHub Secretsに設定する必要あり）
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest  # スキャン対象のイメージ
          args: --file=Dockerfile  # Dockerfile参照してコンテキスト情報を取得

      # ステップ7: Snykのスキャン結果をGitHub Security Insightsにアップロード
      # if: always() は前のステップが失敗してもこのステップを実行する
      - name: Upload Snyk scan result
        uses: github/codeql-action/upload-sarif@v2
        if: always()  # 前のステップが失敗しても必ず実行
        with:
          sarif_file: snyk.sarif  # Snykの結果ファイル
