name: Deploy Kong Data Plane

on:
  workflow_dispatch:

jobs:
  deploy-dp:
    runs-on: ubuntu-latest
    env:
      KONNECT_API: https://${{ vars.KONNECT_REGION }}.api.konghq.com/v2

    steps:
      - name: Set up dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq openssl

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up kubeconfig for AKS
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ vars.AKS_RESOURCE_GROUP_NAME }}
          cluster-name: ${{ vars.AKS_CLUSTER_NAME }}
          # オプション: admin: 'false'

      - name: Get Control Plane ID and upload TLS certs
        id: get_cp
        run: |
          CP_ID=$(curl -s -X GET \
            -H "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
            "${KONNECT_API}/control-planes" \
            | jq -r --arg name "${{ vars.CONTROL_PLANE }}" '.data[] | select(.name==$name) | .id')
          mkdir certs
          openssl req -new -x509 -nodes -newkey rsa:2048 \
            -subj "/CN=kongdp/C=US" \
            -keyout ./certs/tls.key -out ./certs/tls.crt -days 3650
          export CERT=$(awk 'NF {sub(/\r/, ""); printf "%s\\n",$0;}' ./certs/tls.crt)
          curl -sX POST \
            -H "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
            ${KONNECT_API}/control-planes/${CP_ID}/dp-client-certificates \
            --json '{"cert":"'"$CERT"'"}'
          CP_ENDPOINT=$(curl -s -X GET \
            -H "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
            "${KONNECT_API}/control-planes/${CP_ID}" \
            | jq -r '.config.control_plane_endpoint')
          CP_ENDPOINT=$(sed "s@https://@@" <<< $CP_ENDPOINT)
          TP_ENDPOINT=$(curl -s -X GET \
            -H "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
            "${KONNECT_API}/control-planes/${CP_ID}" \
            | jq -r '.config.telemetry_endpoint')
          TP_ENDPOINT=$(sed "s@https://@@" <<< $TP_ENDPOINT)
          echo "tp_endpoint=$TP_ENDPOINT" >> "$GITHUB_OUTPUT"
          echo "cp_endpoint=$CP_ENDPOINT" >> "$GITHUB_OUTPUT"

      - name: Create Kubernetes namespace and TLS secret
        run: |
          kubectl create ns ${{ vars.KONG_NAMESPACE }} || true
          kubectl create secret tls kong-cluster-cert -n ${{ vars.KONG_NAMESPACE }} \
            --cert=./certs/tls.crt \
            --key=./certs/tls.key \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Generate values.yaml
        run: |
          cat <<EOF > ./values.yaml
          image:
            repository: ${{ vars.KONG_REPO }}
            tag: "${{ vars.KONG_VER }}"
            pullSecrets:
              - ghcr-secret

          secretVolumes:
            - kong-cluster-cert

          admin:
            enabled: false

          env:
            role: data_plane
            database: "off"
            cluster_mtls: pki
            cluster_control_plane: ${{ steps.get_cp.outputs.cp_endpoint }}:443
            cluster_server_name: ${{ steps.get_cp.outputs.cp_endpoint }}
            cluster_telemetry_endpoint: ${{ steps.get_cp.outputs.tp_endpoint }}:443
            cluster_telemetry_server_name: ${{ steps.get_cp.outputs.tp_endpoint }}
            cluster_cert: /etc/secrets/kong-cluster-cert/tls.crt
            cluster_cert_key: /etc/secrets/kong-cluster-cert/tls.key
            lua_ssl_trusted_certificate: system
            konnect_mode: "on"
            vitals: "off"
            nginx_worker_processes: "1"
            upstream_keepalive_max_requests: "100000"
            nginx_http_keepalive_requests: "100000"
            proxy_access_log: "off"
            dns_stale_ttl: "3600"
            router_flavor: expressions

          ingressController:
            enabled: false
            installCRDs: false

          resources:
            requests:
              cpu: 1
              memory: "2Gi"

          serviceMonitor:
            enabled: true
            labels:
              release: prometheus-operator
          EOF

      - name: Check and fix Helm release status
        run: |
          # Helmリリースの状態を確認し、ロックされている場合は修復
          if helm list -n ${{ vars.KONG_NAMESPACE }} | grep -q kong-iac; then
            RELEASE_STATUS=$(helm status kong-iac -n ${{ vars.KONG_NAMESPACE }} -o json | jq -r '.info.status')
            echo "Current release status: $RELEASE_STATUS"
            
            if [ "$RELEASE_STATUS" = "pending-install" ] || [ "$RELEASE_STATUS" = "pending-upgrade" ] || [ "$RELEASE_STATUS" = "pending-rollback" ]; then
              echo "Release is locked in $RELEASE_STATUS state. Rolling back to clear lock..."
              helm rollback kong-iac -n ${{ vars.KONG_NAMESPACE }} || true
            fi
          else
            echo "No existing release found. Proceeding with fresh install."
          fi

      - name: Deploy with Helm
        run: |
          helm repo add kong https://charts.konghq.com
          helm repo update
          helm upgrade -i kong-iac kong/kong -n ${{ vars.KONG_NAMESPACE }} --values ./values.yaml --debug --wait

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kong-dp-config
          path: |
            ./values.yaml
            ./certs/tls.crt
            ./certs/tls.key
